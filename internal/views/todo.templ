package views

import "GoWebBoilerplate/internal/models"
import "fmt"

templ TodoList(todos []models.Todo) {
    <div class="space-y-4">
        for _, todo := range todos {
            @TodoItem(&todo)
        }
    </div>
}

templ TodoItem(todo *models.Todo) {
    {{
    className := "text-lg "
    if todo.Done {
        className += "line-through text-gray-500"
    } else {
        className += "text-gray-900"
    }
    }}
    <div class="flex items-center justify-between p-4 bg-white rounded-lg shadow" id={ "todo-" + fmt.Sprint(todo.ID) } x-data="{ loading: false }">
        <div class="flex items-center space-x-4">
            <button
                class="p-2 rounded-full hover:bg-gray-100 disabled:opacity-50"
                hx-put={ "/todos/" + fmt.Sprint(todo.ID) + "/toggle" }
                hx-target={ "#todo-" + fmt.Sprint(todo.ID) }
                hx-swap="outerHTML"
                :disabled="loading"
                @htmx:before-request="loading = true"
                @htmx:after-request="loading = false"
            >
                if todo.Done {
                    <svg class="w-6 h-6 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                } else {
                    <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                }
            </button>
            <span class={className}>
                { todo.Task }
            </span>
        </div>
        <div class="flex items-center space-x-2">
            <button
                class="p-2 text-gray-500 hover:text-gray-700 disabled:opacity-50"
                hx-delete={ "/todos/" + fmt.Sprint(todo.ID) }
                hx-target={ "#todo-" + fmt.Sprint(todo.ID) }
                hx-swap="outerHTML"
                :disabled="loading"
                @htmx:before-request="loading = true"
                @htmx:after-request="loading = false"
            >
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                </svg>
            </button>
        </div>
    </div>
}

templ TodoForm() {
    <form
        class="flex items-center space-x-4 p-4 bg-white rounded-lg shadow"
        hx-post="/todos"
        hx-target="#todo-list"
        hx-swap="beforeend"
        hx-on="htmx:afterRequest: this.reset()"
        x-data="{ loading: false }"
        @htmx:before-request="loading = true"
        @htmx:after-request="loading = false"
    >
        <input
            type="text"
            name="task"
            placeholder="Add a new task..."
            class="flex-1 p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            required
            :disabled="loading"
        />
        <button
            type="submit"
            class="px-4 py-2 text-white bg-blue-500 rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50"
            :disabled="loading"
        >
         Add
        </button>
    </form>
}

templ TodoPage(todos []models.Todo) {
    @BaseLayout() {
        <div class="max-w-2xl mx-auto p-4 space-y-4">
            <h1 class="text-2xl font-bold text-gray-900">Todo List</h1>
            @TodoForm()
            <div id="todo-list" class="space-y-4">
                @TodoList(todos)
            </div>
        </div>
    }
} 
